{"version":3,"sources":["components/NavBar.js","components/TeamCard.js","TeamComponent.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","className","useStyles","makeStyles","theme","formControl","maxWidth","minWidth","marginBottom","spacing","card","width","margin","SaveButton","padding","typography","TeamCard","props","classes","_React$useState","React","useState","Team","Employees","_React$useState2","Object","slicedToArray","TeamMembers","setTeamMembers","_React$useState3","TeamLead","_React$useState4","setTeamLead","asignedProjects","Projects","map","assignedID","find","proj","_id","_React$useState5","_React$useState6","setProjects","_React$useState7","_React$useState8","anchorEl","setAnchorEl","_React$useState9","_React$useState10","SavePopoverResponse","setSavePopoverState","open","Boolean","id","EmployeeFullName","Array","isArray","emp","employee","FirstName","LastName","join","foundEmployee","ProjectName","asignedproj","asignedProject","Card","CardHeader","title","TeamName","action","Fragment","Button","aria-describedby","onClick","event","currentTarget","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","axios","put","Url","then","response","data","message","stop","apply","this","arguments","updateData","variant","color","button","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","Typography","gutterBottom","CardContent","FormControl","InputLabel","htmlFor","Select","autoWidth","value","onChange","target","input","Input","renderValue","selected","MenuItem","key","ListItemText","primary","multiple","herokuLink","progress","createMuiTheme","palette","main","contrastText","TeamComponent","_useState","_useState2","Teams","getTeam","_useState3","_useState4","getEmployee","_useState5","_useState6","getProject","_useState7","_useState8","Ready","setStatus","useEffect","fetchTeam","fetchEmployee","fetchProject","get","sent","fetchData","MuiThemeProvider_default","Container","components_NavBar","Box","display","alignContent","flexDirection","flexWrap","team","components_TeamCard","CircularProgress","window","location","hostname","match","ReactDOM","render","src_TeamComponent","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a96d9cc5.chunk.js","sourcesContent":["import React from 'react'\n\nfunction NavBar() {\n    return (\n        <nav className=\"navbar navbar-default\">\n            <div className=\"container-fluid\">\n                <div className=\"navbar-header\">\n                    <h3 className=\"navbar-brand\" >Assignment 3 - Team Details</h3>\n                </div> \n            </div>\n        </nav>\n    );\n}\nexport default NavBar\n","import React from 'react'\nimport axios from \"axios\";\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport Popover from '@material-ui/core/Popover';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles(theme => ({\n    formControl: {\n        maxWidth: '100%',\n        minWidth: 150,\n        marginBottom: theme.spacing(3)\n    },\n    card: {\n        width: \"20vw\",\n        minWidth: \"150px\",\n        margin: theme.spacing(1),\n    },\n    SaveButton: {\n        padding: theme.spacing(2),\n\n    },\n    typography: {\n        padding: theme.spacing(2)\n    }\n}));\n\nfunction TeamCard(props) {\n    const classes = useStyles();\n\n    const [TeamMembers, setTeamMembers] = React.useState(props.Team.Employees);\n\n    const [TeamLead, setTeamLead] = React.useState(props.Team.TeamLead);\n\n    let asignedProjects = props.Team.Projects.map(assignedID => props.Projects.find(proj => proj._id === assignedID));\n\n    const [Projects, setProjects] = React.useState(asignedProjects);\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const [SavePopoverResponse, setSavePopoverState] = React.useState(\"Loading\");\n    function handleTeamLeadChange(event) {\n        setTeamLead(event.target.value)\n    }\n    function handleTeamMemberChange(event) {\n        setTeamMembers(event.target.value)\n    }\n    function handleProjectChange(event) {\n        setProjects(event.target.value)\n    }\n    function handlePopoverClose(event) {\n        setAnchorEl(null);\n    }\n    const open = Boolean(anchorEl);\n\n    const id = open ? 'save-popover' : null;\n\n    function handleSave(event) {\n        setAnchorEl(event.currentTarget);\n        const updateData = async () => {\n            await axios.put(props.Url + 'team/' + props.Team._id,\n                {\n                    Projects,\n                    Employees: TeamMembers,\n                    TeamLead\n                })\n                .then(response => setSavePopoverState(response.data.message));\n        };\n        updateData();\n    }\n\n    function EmployeeFullName(id) {\n        if (Array.isArray(id)) return id.map(_id => props.Employees.find(emp => emp._id === _id)).map(employee => employee.FirstName + ' ' +  employee.LastName).join(',');\n        let foundEmployee = props.Employees.find(emp => emp._id === id);\n        if (foundEmployee) return foundEmployee.FirstName + ' ' + foundEmployee.LastName;\n        return `Employee does not exist`;\n    }\n\n    function ProjectName(id) {\n        if (Array.isArray(id)) {\n            let asignedProjects = id.map((asignedproj => props.Projects.find(proj => proj._id === asignedproj._id)));\n            if (asignedProjects){\n                 return asignedProjects.map(asignedproj => asignedproj.ProjectName).join(',');\n            }\n        } else {\n            let asignedProject = props.Projects.find(proj => proj._id === id);\n            if (asignedProject) {\n                return asignedProject.ProjectName;\n            }\n        }\n    }\n    return (\n        <Card className={classes.card}>\n            <CardHeader title={props.Team.TeamName}\n                        action={\n                            <React.Fragment>\n                            <Button\n                                aria-describedby={id}\n                                onClick={handleSave}\n                                variant=\"contained\"\n                                color=\"primary\"\n                                className={classes.button}\n                            >\n                                Save\n                            </Button>\n                                <Popover\n                                    id={id}\n                                    open={open}\n                                    anchorEl={anchorEl}\n                                    onClose={handlePopoverClose}\n                                    anchorOrigin={{\n                                        vertical: 'bottom',\n                                        horizontal: 'left',\n                                    }}\n                                    transformOrigin={{\n                                        vertical: 'top',\n                                        horizontal: 'left',\n                                    }}\n                                    >\n                                    <Typography className={classes.typography} gutterBottom>{SavePopoverResponse}</Typography>\n                                </Popover>\n                            </React.Fragment>\n                        }>\n            </CardHeader>\n            <CardContent>\n                <FormControl className={classes.formControl}>\n                    <InputLabel htmlFor=\"select-teamLead\">Team Lead</InputLabel>\n                        <Select\n                            id=\"select-teamLead\"\n                            autoWidth={true}\n                            value={TeamLead}\n                            onChange={handleTeamLeadChange}\n                            input={<Input />}\n                            renderValue={selected => EmployeeFullName(selected)}\n                        >\n                            {\n                                props.Employees.map(emp =>\n                                    <MenuItem key={emp._id} value={emp._id}>\n                                        <ListItemText primary={EmployeeFullName(emp._id)} />\n                                    </MenuItem>)\n                            }\n                        </Select>\n                </FormControl>\n                <FormControl className={classes.formControl}>\n                    <InputLabel htmlFor=\"select-teamMem\">Team Members</InputLabel>\n                        <Select\n                            id=\"select-teamMem\"\n                            multiple\n                            autoWidth={true}\n                            value={TeamMembers}\n                            onChange={handleTeamMemberChange}\n                            input={<Input />}\n                            renderValue={selected => EmployeeFullName(selected)}\n                        >\n                            {props.Employees.map(emp =>\n                                <MenuItem key={emp._id} value={emp._id}>\n                                    <ListItemText primary={EmployeeFullName(emp._id)} />\n                                </MenuItem>\n                            )}\n                        </Select>\n                </FormControl>\n                <FormControl className={classes.formControl}  >\n                    <InputLabel htmlFor=\"select-project\">Projects</InputLabel>\n                        <Select\n                            id=\"select-project\"\n                            autoWidth={true}\n                            value={Projects}\n                            onChange={handleProjectChange}\n                            input={<Input id=\"name-native-disabled\" />}\n                            renderValue={selected => ProjectName(selected)}\n                        >\n                            {Projects.map(proj =>\n                                <MenuItem key={proj._id} value={proj._id}>\n                                    <ListItemText primary={ProjectName(proj._id)} />\n                                </MenuItem>\n                            )}\n                        </Select>\n                </FormControl>\n            </CardContent>\n        </Card>\n    );\n}\nexport default TeamCard\n","import React, {useState, useEffect} from 'react'\nimport axios from 'axios'\nimport NavBar from './components/NavBar'\nimport TeamCard from './components/TeamCard'\nimport Box from '@material-ui/core/Box'\nimport Container from '@material-ui/core/Container'\nimport { createMuiTheme , makeStyles } from '@material-ui/core/styles';\nimport MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst herokuLink = \"https://web422-api-server.herokuapp.com/\";\n\nconst useStyles = makeStyles(theme => ({\n  progress: {\n    margin: theme.spacing(2),\n  },\n}));\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#3498db',\n      contrastText: 'white',\n    },\n    }});\nfunction TeamComponent() {\n  const [Teams, getTeam] = useState([]);\n  const [Employees, getEmployee] = useState([]);\n  const [Projects, getProject] = useState([]);\n  const [Ready, setStatus] = useState(false);\n  const classes = useStyles();\n\n\n  useEffect( () => {\n    const fetchData = async () => {\n      let fetchTeam = await axios.get(herokuLink + 'teams-raw');\n      getTeam(fetchTeam.data);\n      let fetchEmployee = await axios.get(herokuLink + 'employees');\n      getEmployee(fetchEmployee.data);\n      let fetchProject = await axios.get(herokuLink + 'projects');\n      getProject(fetchProject.data);\n      setStatus(true);\n    };\n    fetchData();\n  }, []);\n  return (\n      <MuiThemeProvider theme={theme}>\n      <Container>\n        <NavBar />\n          <Box display=\"flex\"\n               alignContent=\"flex-start\"\n               flexDirection=\"row\"\n               flexWrap=\"wrap\"\n          >\n          { Ready ? Teams.map( team =>\n                    <TeamCard\n                        key={team._id}\n                        Team={team}\n                        Employees={Employees}\n                        Projects={Projects}\n                        Url={herokuLink}\n                    />\n                ) :(<div>\n                      <CircularProgress className={classes.progress} />\n                    </div>\n                \n              )}\n            </Box>\n      </Container>\n    </MuiThemeProvider>\n    );\n}\nexport default TeamComponent\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/*********************************************************************************\n * WEB422 – Assignment 03\n * I declare that this assignment is my own work in accordance with Seneca Academic Policy. No part\n of this\n * assignment has been copied manually or electronically from any other source (including web sites)\n or\n * distributed to other students.\n *\n * Name: Tashi Tsering     Student ID: 114763170      Date: 06/18/2019\n *\n ********************************************************************************/\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TeamComponent from './TeamComponent';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<TeamComponent />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}