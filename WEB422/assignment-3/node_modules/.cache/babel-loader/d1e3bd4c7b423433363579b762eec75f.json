{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Tashi\\\\Desktop\\\\a3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Tashi\\\\Desktop\\\\a3\\\\src\\\\components\\\\TeamCard.js\";\nimport React from 'react';\nimport axios from \"axios\";\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport Popover from '@material-ui/core/Popover';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    maxWidth: '100%',\n    minWidth: 150,\n    marginBottom: theme.spacing(3)\n  },\n  card: {\n    width: \"20vw\",\n    minWidth: \"150px\",\n    margin: theme.spacing(1)\n  },\n  SaveButton: {\n    padding: theme.spacing(2)\n  },\n  typography: {\n    padding: theme.spacing(2)\n  }\n}));\n\nfunction TeamCard(props) {\n  const classes = useStyles();\n\n  const _React$useState = React.useState(props.Team.Employees),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        TeamMembers = _React$useState2[0],\n        setTeamMembers = _React$useState2[1];\n\n  const _React$useState3 = React.useState(props.Team.TeamLead),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        TeamLead = _React$useState4[0],\n        setTeamLead = _React$useState4[1];\n\n  let asignedProjects = props.Team.Projects.map(assignedID => props.Projects.find(proj => proj._id === assignedID));\n\n  const _React$useState5 = React.useState(asignedProjects),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        Projects = _React$useState6[0],\n        setProjects = _React$useState6[1];\n\n  const _React$useState7 = React.useState(null),\n        _React$useState8 = _slicedToArray(_React$useState7, 2),\n        anchorEl = _React$useState8[0],\n        setAnchorEl = _React$useState8[1];\n\n  const _React$useState9 = React.useState(\"Loading\"),\n        _React$useState10 = _slicedToArray(_React$useState9, 2),\n        SavePopoverResponse = _React$useState10[0],\n        setSavePopoverState = _React$useState10[1];\n\n  function handleTeamLeadChange(event) {\n    setTeamLead(event.target.value);\n  }\n\n  function handleTeamMemberChange(event) {\n    setTeamMembers(event.target.value);\n  }\n\n  function handleProjectChange(event) {\n    setProjects(event.target.value);\n  }\n\n  function handlePopoverClose(event) {\n    setAnchorEl(null);\n  }\n\n  const open = Boolean(anchorEl);\n  const id = open ? 'save-popover' : null;\n\n  function handleSave(event) {\n    setAnchorEl(event.currentTarget);\n\n    const updateData = async () => {\n      await axios.put(props.Url + 'team/' + props.Team._id, {\n        Projects,\n        Employees: TeamMembers,\n        TeamLead\n      }).then(response => setSavePopoverState(response.data.message));\n    };\n\n    updateData();\n  }\n\n  function EmployeeFullName(id) {\n    if (Array.isArray(id)) return id.map(_id => props.Employees.find(emp => emp._id === _id)).map(employee => employee.FirstName + ' ' + employee.LastName).join(',');\n    let foundEmployee = props.Employees.find(emp => emp._id === id);\n    if (foundEmployee) return foundEmployee.FirstName + ' ' + foundEmployee.LastName;\n    return \"Employee does not exist\";\n  }\n\n  function ProjectName(id) {\n    if (Array.isArray(id)) {\n      let asignedProjects = id.map(asignedproj => props.Projects.find(proj => proj._id === asignedproj._id));\n\n      if (asignedProjects) {\n        return asignedProjects.map(asignedproj => asignedproj.ProjectName).join(',');\n      }\n    } else {\n      let asignedProject = props.Projects.find(proj => proj._id === id);\n\n      if (asignedProject) {\n        return asignedProject.ProjectName;\n      }\n    }\n  }\n\n  return React.createElement(Card, {\n    className: classes.card,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    title: props.Team.TeamName,\n    action: React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(Button, {\n      \"aria-describedby\": id,\n      onClick: handleSave,\n      variant: \"contained\",\n      color: \"primary\",\n      className: classes.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Save\"), React.createElement(Popover, {\n      id: id,\n      open: open,\n      anchorEl: anchorEl,\n      onClose: handlePopoverClose,\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'left'\n      },\n      transformOrigin: {\n        vertical: 'top',\n        horizontal: 'left'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      className: classes.typography,\n      gutterBottom: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, SavePopoverResponse))),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }), React.createElement(CardContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    htmlFor: \"select-teamLead\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, \"Team Lead\"), React.createElement(Select, {\n    id: \"select-teamLead\",\n    autoWidth: true,\n    value: TeamLead,\n    onChange: handleTeamLeadChange,\n    input: React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }),\n    renderValue: selected => EmployeeFullName(selected),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, props.Employees.map(emp => React.createElement(MenuItem, {\n    key: emp._id,\n    value: emp._id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(ListItemText, {\n    primary: EmployeeFullName(emp._id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }))))), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    htmlFor: \"select-teamMem\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, \"Team Members\"), React.createElement(Select, {\n    id: \"select-teamMem\",\n    multiple: true,\n    autoWidth: true,\n    value: TeamMembers,\n    onChange: handleTeamMemberChange,\n    input: React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }),\n    renderValue: selected => EmployeeFullName(selected),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, props.Employees.map(emp => React.createElement(MenuItem, {\n    key: emp._id,\n    value: emp._id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, React.createElement(ListItemText, {\n    primary: EmployeeFullName(emp._id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }))))), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    htmlFor: \"select-project\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, \"Projects\"), React.createElement(Select, {\n    id: \"select-project\",\n    autoWidth: true,\n    value: Projects,\n    onChange: handleProjectChange,\n    input: React.createElement(Input, {\n      id: \"name-native-disabled\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }),\n    renderValue: selected => ProjectName(selected),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, Projects.map(proj => React.createElement(MenuItem, {\n    key: proj._id,\n    value: proj._id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, React.createElement(ListItemText, {\n    primary: ProjectName(proj._id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  })))))));\n}\n\nexport default TeamCard;","map":{"version":3,"sources":["C:\\Users\\Tashi\\Desktop\\a3\\src\\components\\TeamCard.js"],"names":["React","axios","MenuItem","FormControl","ListItemText","makeStyles","Card","CardHeader","CardContent","Input","InputLabel","Select","Popover","Button","Typography","useStyles","theme","formControl","maxWidth","minWidth","marginBottom","spacing","card","width","margin","SaveButton","padding","typography","TeamCard","props","classes","useState","Team","Employees","TeamMembers","setTeamMembers","TeamLead","setTeamLead","asignedProjects","Projects","map","assignedID","find","proj","_id","setProjects","anchorEl","setAnchorEl","SavePopoverResponse","setSavePopoverState","handleTeamLeadChange","event","target","value","handleTeamMemberChange","handleProjectChange","handlePopoverClose","open","Boolean","id","handleSave","currentTarget","updateData","put","Url","then","response","data","message","EmployeeFullName","Array","isArray","emp","employee","FirstName","LastName","join","foundEmployee","ProjectName","asignedproj","asignedProject","TeamName","button","vertical","horizontal","selected"],"mappings":"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","sourcesContent":["import React from 'react'\nimport axios from \"axios\";\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport Popover from '@material-ui/core/Popover';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles(theme => ({\n    formControl: {\n        maxWidth: '100%',\n        minWidth: 150,\n        marginBottom: theme.spacing(3)\n    },\n    card: {\n        width: \"20vw\",\n        minWidth: \"150px\",\n        margin: theme.spacing(1),\n    },\n    SaveButton: {\n        padding: theme.spacing(2),\n\n    },\n    typography: {\n        padding: theme.spacing(2)\n    }\n}));\n\nfunction TeamCard(props) {\n    const classes = useStyles();\n\n    const [TeamMembers, setTeamMembers] = React.useState(props.Team.Employees);\n\n    const [TeamLead, setTeamLead] = React.useState(props.Team.TeamLead);\n\n    let asignedProjects = props.Team.Projects.map(assignedID => props.Projects.find(proj => proj._id === assignedID));\n\n    const [Projects, setProjects] = React.useState(asignedProjects);\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const [SavePopoverResponse, setSavePopoverState] = React.useState(\"Loading\");\n    function handleTeamLeadChange(event) {\n        setTeamLead(event.target.value)\n    }\n    function handleTeamMemberChange(event) {\n        setTeamMembers(event.target.value)\n    }\n    function handleProjectChange(event) {\n        setProjects(event.target.value)\n    }\n    function handlePopoverClose(event) {\n        setAnchorEl(null);\n    }\n    const open = Boolean(anchorEl);\n\n    const id = open ? 'save-popover' : null;\n\n    function handleSave(event) {\n        setAnchorEl(event.currentTarget);\n        const updateData = async () => {\n            await axios.put(props.Url + 'team/' + props.Team._id,\n                {\n                    Projects,\n                    Employees: TeamMembers,\n                    TeamLead\n                })\n                .then(response => setSavePopoverState(response.data.message));\n        };\n        updateData();\n    }\n\n    function EmployeeFullName(id) {\n        if (Array.isArray(id)) return id.map(_id => props.Employees.find(emp => emp._id === _id)).map(employee => employee.FirstName + ' ' +  employee.LastName).join(',');\n        let foundEmployee = props.Employees.find(emp => emp._id === id);\n        if (foundEmployee) return foundEmployee.FirstName + ' ' + foundEmployee.LastName;\n        return `Employee does not exist`;\n    }\n\n    function ProjectName(id) {\n        if (Array.isArray(id)) {\n            let asignedProjects = id.map((asignedproj => props.Projects.find(proj => proj._id === asignedproj._id)));\n            if (asignedProjects){\n                 return asignedProjects.map(asignedproj => asignedproj.ProjectName).join(',');\n            }\n        } else {\n            let asignedProject = props.Projects.find(proj => proj._id === id);\n            if (asignedProject) {\n                return asignedProject.ProjectName;\n            }\n        }\n    }\n    return (\n        <Card className={classes.card}>\n            <CardHeader title={props.Team.TeamName}\n                        action={\n                            <React.Fragment>\n                            <Button\n                                aria-describedby={id}\n                                onClick={handleSave}\n                                variant=\"contained\"\n                                color=\"primary\"\n                                className={classes.button}\n                            >\n                                Save\n                            </Button>\n                                <Popover\n                                    id={id}\n                                    open={open}\n                                    anchorEl={anchorEl}\n                                    onClose={handlePopoverClose}\n                                    anchorOrigin={{\n                                        vertical: 'bottom',\n                                        horizontal: 'left',\n                                    }}\n                                    transformOrigin={{\n                                        vertical: 'top',\n                                        horizontal: 'left',\n                                    }}\n                                    >\n                                    <Typography className={classes.typography} gutterBottom>{SavePopoverResponse}</Typography>\n                                </Popover>\n                            </React.Fragment>\n                        }>\n            </CardHeader>\n            <CardContent>\n                <FormControl className={classes.formControl}>\n                    <InputLabel htmlFor=\"select-teamLead\">Team Lead</InputLabel>\n                        <Select\n                            id=\"select-teamLead\"\n                            autoWidth={true}\n                            value={TeamLead}\n                            onChange={handleTeamLeadChange}\n                            input={<Input />}\n                            renderValue={selected => EmployeeFullName(selected)}\n                        >\n                            {\n                                props.Employees.map(emp =>\n                                    <MenuItem key={emp._id} value={emp._id}>\n                                        <ListItemText primary={EmployeeFullName(emp._id)} />\n                                    </MenuItem>)\n                            }\n                        </Select>\n                </FormControl>\n                <FormControl className={classes.formControl}>\n                    <InputLabel htmlFor=\"select-teamMem\">Team Members</InputLabel>\n                        <Select\n                            id=\"select-teamMem\"\n                            multiple\n                            autoWidth={true}\n                            value={TeamMembers}\n                            onChange={handleTeamMemberChange}\n                            input={<Input />}\n                            renderValue={selected => EmployeeFullName(selected)}\n                        >\n                            {props.Employees.map(emp =>\n                                <MenuItem key={emp._id} value={emp._id}>\n                                    <ListItemText primary={EmployeeFullName(emp._id)} />\n                                </MenuItem>\n                            )}\n                        </Select>\n                </FormControl>\n                <FormControl className={classes.formControl}  >\n                    <InputLabel htmlFor=\"select-project\">Projects</InputLabel>\n                        <Select\n                            id=\"select-project\"\n                            autoWidth={true}\n                            value={Projects}\n                            onChange={handleProjectChange}\n                            input={<Input id=\"name-native-disabled\" />}\n                            renderValue={selected => ProjectName(selected)}\n                        >\n                            {Projects.map(proj =>\n                                <MenuItem key={proj._id} value={proj._id}>\n                                    <ListItemText primary={ProjectName(proj._id)} />\n                                </MenuItem>\n                            )}\n                        </Select>\n                </FormControl>\n            </CardContent>\n        </Card>\n    );\n}\nexport default TeamCard\n"]},"metadata":{},"sourceType":"module"}